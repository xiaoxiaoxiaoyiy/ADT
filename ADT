#1
class CompleteBinaryTree:
    def __init__(self):
        self.head = None
    
    def getParent(self, i):
        if i == 0:
            return None
        return (i - 1) // 2
    
    def getLeftChild(self, i):
        return 2 * i + 1
    
    def getRightChild(self, i):
        return 2 * i + 2


#2
class MinPriorityQueue:
    def __init__(self):
        self.tree = CompleteBinaryTree()
        self.count = 0
    
    def insert(self, key):
        node = Node(key)
        if self.count == 0:
            self.tree.head = node
        else:
            parent_index = self.tree.getParent(self.count)
            parent_node = self._get_node_at_index(parent_index)
            if self.tree.getLeftChild(parent_index) == self.count:
                parent_node.next = node
            else:
                parent_node.next.next = node
        self.count += 1
        self._bubble_up(self.count - 1)
        
    def delMin(self):
        min_node = self.tree.head
        last_node = self._get_node_at_index(self.count - 1)
        if self.count > 1:
            self.tree.head = last_node
        self._bubble_down(0)
        self.count -= 1
        return min_node.key
    
    def _bubble_up(self, i):
        while i > 0:
            parent_index = self.tree.getParent(i)
            parent_node = self._get_node_at_index(parent_index)
            current_node = self._get_node_at_index(i)
            if parent_node.key > current_node.key:
                parent_node.key, current_node.key = current_node.key, parent_node.key
                i = parent_index
            else:
                break

    def _bubble_down(self, i):
        while i < self.count:
            left_child_index = self.tree.getLeftChild(i)
            right_child_index = self.tree.getRightChild(i)
            current_node = self._get_node_at_index(i)
            if left_child_index < self.count:
                left_child_node = self._get_node_at_index(left_child_index)
                if right_child_index < self.count:
                    right_child_node = self._get_node_at_index(right_child_index)
                    if left_child_node.key < current_node.key or right_child_node.key < current_node.key:
                        if left_child_node.key < right_child_node.key:
                            current_node.key, left_child_node.key = left_child_node.key, current_node.key
                            i = left_child_index
                        else:
                            current_node.key, right_child_node.key = right_child_node.key, current_node.key
                            i = right_child_index
                else:
                    if left_child_node.key < current_node.key:
                        current_node.key, left_child_node.key = left_child_node.key, current_node.key
                        i = left_child_index
                    else:
                        break
            else:
                break

    def _get_node_at_index(self, index):
        current_node = self.tree.head
        for i in range(index):
            current_node = current_node.next
        return current_node

#4
import time
import random
import matplotlib.pyplot as plt

def benchmark_heap(heap, n):
    insert_times = []
    delete_times = []
    for i in range(n):
        insert_start = time.time()
        heap.insert(random.randint(1, 100))
        insert_end = time.time()
        insert_times.append(insert_end - insert_start)
        
        delete_start = time.time()
        heap.delMin()
        delete_end = time.time()
        delete_times.append(delete_end - delete_start)
        
    plt.plot(insert_times, label='Insert')
    plt.plot(delete_times, label='Delete')
    plt.xlabel('Operations')
    plt.ylabel('Time (s)')
    plt.legend()
    plt.show()




#5
from graphviz import Digraph

def visualize_heap(heap):
    dot = Digraph()
    current_node = heap.tree.head
    queue = [(current_node, 0)]
    while queue:
        current_node, index = queue.pop(0)
        dot.node(str(index), str(current_node.key))
        left_child_index = heap.tree.getLeftChild(index)
        if left_child_index < heap.count:
            left_child_node = heap._get_node_at_index(left_child_index)
            queue.append((left_child_node, left_child_index))
            dot.edge(str(index), str(left_child_index))
        right_child_index = heap.tree.getRightChild(index)
        if right_child_index < heap.count:
            right_child_node = heap._get_node_at_index(right_child_index)
            queue.append((right_child_node, right_child_index))
            dot.edge(str(index), str(right_child_index))
    dot.render('heap.gv', view=True)

heap = MinPriorityQueue()
# insert some items into the heap
visualize_heap(heap)
